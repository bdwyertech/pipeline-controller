// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/weaveworks/pipeline-controller/server/strategy (interfaces: Strategy)
//
// Generated by this command:
//
//	mockgen -destination mock_strategy_test.go -package strategy github.com/weaveworks/pipeline-controller/server/strategy Strategy
//
// Package strategy is a generated GoMock package.
package strategy

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/weaveworks/pipeline-controller/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockStrategy is a mock of Strategy interface.
type MockStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockStrategyMockRecorder
}

// MockStrategyMockRecorder is the mock recorder for MockStrategy.
type MockStrategyMockRecorder struct {
	mock *MockStrategy
}

// NewMockStrategy creates a new mock instance.
func NewMockStrategy(ctrl *gomock.Controller) *MockStrategy {
	mock := &MockStrategy{ctrl: ctrl}
	mock.recorder = &MockStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStrategy) EXPECT() *MockStrategyMockRecorder {
	return m.recorder
}

// Handles mocks base method.
func (m *MockStrategy) Handles(arg0 v1alpha1.Promotion) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handles", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Handles indicates an expected call of Handles.
func (mr *MockStrategyMockRecorder) Handles(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handles", reflect.TypeOf((*MockStrategy)(nil).Handles), arg0)
}

// Promote mocks base method.
func (m *MockStrategy) Promote(arg0 context.Context, arg1 v1alpha1.Promotion, arg2 Promotion) (*PromotionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Promote", arg0, arg1, arg2)
	ret0, _ := ret[0].(*PromotionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Promote indicates an expected call of Promote.
func (mr *MockStrategyMockRecorder) Promote(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Promote", reflect.TypeOf((*MockStrategy)(nil).Promote), arg0, arg1, arg2)
}
